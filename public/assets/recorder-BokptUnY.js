(function(){"use strict";class n extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"isRecording",defaultValue:0}]}constructor(){super(),this._bufferSize=2048,this._buffer=new Float32Array(this._bufferSize),this._initBuffer()}_initBuffer(){this._bytesWritten=0}_isBufferEmpty(){return this._bytesWritten===0}_isBufferFull(){return this._bytesWritten===this._bufferSize}_appendToBuffer(e){this._isBufferFull()&&this._flush(),this._buffer[this._bytesWritten]=e,this._bytesWritten+=1}_flush(){let e=this._buffer;this._bytesWritten<this._bufferSize&&(e=e.slice(0,this._bytesWritten)),this.port.postMessage({eventType:"data",audioBuffer:e}),this._initBuffer()}_recordingStopped(){this.port.postMessage({eventType:"stop"})}process(e,o,h){const i=h.isRecording,f=o[0],s=e[0],u=f[0],_=f[1];let r=!1;for(let t=0;t<u.length;t++)t<i.length&&(r=i[t]===1),!r&&!this._isBufferEmpty()&&(this._flush(),this._recordingStopped()),r&&(this._appendToBuffer(s[0][t]),this._appendToBuffer(s[1][t])),u[t]=s[0][t],_[t]=s[1][t];return!0}}registerProcessor("recorder",n)})();
